go语言的优势:
脚本化的语法；
静态类型+编译型，程序运行速度有保障；
原生的支持并发编程：
降低开发，维护成本;程序可以更好的执行。 

go语言的劣势:
语法糖并没有python和ruby那么多;
目前的程序运行速度还不及C;
第三方函数库暂时不像绝对主流的编程语言那样多

https://storage.googleapis.com/golang/go1.4.2.windows-amd64.msi 
linux下的安装方法:
从http://golang.org/dl/下载最新版本的GO语言二进制档案包.
注意：根据操作系统和计算架构正确选择档案包 

使用tar命令将档案包解压到/usr/local目录中.具体方法如下(需要root权限):
tar -zxf go1.4.2.linux-amd64.tar.gz -C /usr/local 

验证安装结果:
进入到/usr/local目录中查看是否存在一个名为go的目录。 
在命令行下进入到这个go目录，敲入bin/go version并回车，查看是否有如下图所示的Go语言版本信息打印出来。

# Go setting
export GOROOT=/usr/local/go 
export GOPATH=~/golib:~/goproject
export GOBIN=~/gobin 
export PATH=$PATH:$GOROOT/bin:$GOBIN


工作区 GOPATH
----src 存放源码文件 以代码包为组织形式
----pkg 存放归档文件 .a为结尾
平台相关目录
两个隐藏的GO语言环境变量：GOOS和GOARCH
GOOS:操作系统
GOARCH:计算机构
example ：$GOOS_$GOARCH 如：linux_adm64
bin 存放工作区中可执行文件


Go源码文件:名称以.go为后缀，内容以Go语言代码组织的文件 多个Go源码文件是需要用代码包组织起来的
源码文件分为三类:命令源码文件、库源码文件(go语言程序) 测试源码文件(辅助源码文件)
命令源码文件:声明自己属于main代码包、包含无参数声明和结果声明的main函数;被安装后，相应的可执行文件会被存放到GOBIN指向的目录或<当前工作区目录>/bin下
命令源码文件是Go程序的入口，但不建议把程序都写在一个文件中;同一个代码包中强烈不建议直接包含多个命令源码文件。
库源码文件:不具备命令源码文件的那两个特征的源码文件, 被安装后，相应的归档文件会被存放到<当前工作区目录>/pkg/<平台相关目录>下
测试源码文件:不具备命令源码文件的那两个特征的源码文件。名称以_test.go为后缀。其中至少有一个函数的名称以Test或Benchmark为前缀。并且，该函数接受一个类型为
*testing.T或*testing.B的参数
func TestFind(t *testing.T){//省略若干条语句} func BenchmarkFind(b *testing.B){//省略若干条语句}