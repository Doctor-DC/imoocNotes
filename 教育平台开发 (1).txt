##windows下搭建开发环境:
1. 安装虚拟环境管理
```
pip install virtualenv
pip install virtualenvwrapper-win
```
2. 创建虚拟环境
`mkvirtualenv testvir2`

3. 退出激活状态
`deactivate`

4. 知道有哪些虚拟环境
`workon`

5. 直接进入虚拟环境
`workon testvir2`


###django目录结构
models.py
urls.py
views.py
templates
- apps(自定义目录)
专门存放项目不同功能的app,开发中app之间可能会互相导入，
可以在pycharm中标记apps为根目录，这样就不用from apps.xxx import xxx了。
但是在cmd模式下会报错的，解决方式是在setting中做设置 
- 创建app: 
Tools----Run manage.py task ----startapp [appname],一般存放在apps目录下 
-整个目录：
    -- apps
    --项目名
    --log
    ---media
    --static
    --templates
    --manages.py
自动生成：
主目录文件中setting全局配置，url配置入口。
--templates放html文件，
--manage.py启动dj主要文件 
--static存放js、cs、图片文件 log存放日志文件 media存放用户上传文件 --apps存放各种APP
--shift + tab 调整css样式

###配置mysql驱动和seeting文件。
settings databases配置数据库连接sqllite3换成mysql的NAME、USER、PASSWORD、HOST 安装驱动workon testvir2 pip install mysql-python win安装，
出现问题到网址 http://blog.csdn.net/u012882134/article/details/51934165 下载对应mysql驱动 cd 下载目录 pip install 下载的文件名 

####mysql配置好之后进行数据迁移
- migrate
- makemigrations生成数据表

####创建apps目录存放apps
settings文件修改
```python
import sys
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

```



migrate urls.py中url(r'^form/$',) 
创建views：def getform()
    url(r'^form/$',
    ^表示以此开头 $为结尾
   models.ForeignKey
    models.DateTimeField
    models.IntegerField
    models.IPAddressField
    models.FileField
    models.ImageField
    models.EmailField

'AutoField', 'BLANK_CHOICE_DASH', 'BigIntegerField', 'BinaryField',
    'BooleanField', 'CharField', 'CommaSeparatedIntegerField', 'DateField',
    'DateTimeField', 'DecimalField', 'DurationField', 'EmailField', 'Empty',
    'Field', 'FieldDoesNotExist', 'FilePathField', 'FloatField',
    'GenericIPAddressField', 'IPAddressField', 'IntegerField', 'NOT_PROVIDED',
    'NullBooleanField', 'PositiveIntegerField', 'PositiveSmallIntegerField',
    'SlugField', 'SmallIntegerField', 'TextField', 'TimeField', 'URLField',
    'UUIDField',

   # _*_ coding:utf-8 _*_


           db_table = "user_message"
        ordering = "-object_id"

stop之后
debug
然后刷新页面
f6
观察值。之后f8
 {% csrf_token %}
 {% ifequal my_message.name 'mtianyan' %}mtianyanhas{% else %}hasnomtianyan{% endifequal %}"
 ifequal my_message.name|slice:'5'
 函数
 form action="{% url 'go_form' %}"
  url(r'^form/$', getform,name ='go_form')
  为地址取别名
  可以使外在url变化。而内部不变。
  r'^formgo/$'
  /$控制结束。否则就是前五位

  目录

  设计django app
  设计 app models
  数据表生成与修改


user用户管理
course课程管理
organization 机构与教师管理
operation 用户操作管理



流程：
1：新建项目
pip install MySQL_python-1.2.5-cp27-none-win_a
md64.whl
database
'ENGINE': 'django.db.backends.mysql',
        'NAME': 'testdjango',
        'USER':"root",
        'PASSWORD':"ty158917",
        'Host':"localhost"

循环引用。
a调用b,b调用a
a文件里面imort了b文件里面的东西， 同时b文件又import了a文件里面的东西， 两个文件都在等待对方创建好才能import， 不就死循环了么？

分层设计

user models.py 编写
course models.py 编写
organization models.py 编写 老师&机构

opertion models.py 用户和course&用户和organization的联系

		operation 
course organization user
一对多的关系多建一张表
课程与章节一对多
章节与视频一对多
所以三张表 课程 章节 视频
视频与资料一对多
再建一张表
course - 课程的基本信息
lesson - 章节信息
video -视频
courseResource -课程资源

课程机构的基本信息
CourseOrg - 课程机构的基本信息

Teacher - 教师

citydic -城市

{# operation models.py
 #}
useAsk -用户咨询

courseComments - 用户评论

userfavorite 用户收藏

userMessage 用户消息

userCourse 用户学习的课程

优秀设计：
fav_id = models.IntegerField(default=0, verbose_name=u"数据id")
    fav_type = models.IntegerField(choices=((1,"课程"),(2,"课程机构"),(3,"讲师")),default=1,verbose_name=u'收藏类型')

     user = models.IntegerField(default=0, verbose_name=u"接受用户id")

import os
import sys
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0,os.path.join(BASE_DIR,'apps'))

4-8总结了整个数据库


后台管理系统

特点：

权限管理
少前端样式
快速开发

creat superuser

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False

    def __unicode__(self):
        return '{0}({1})'.format(self.code, self.email)



{% static '' %}


Nginx +
端口转发+静态文件

uwsgi/tomcat