LEGB：L>E>G>B
L:local 函数内部作用域
E:enclosing 函数内部与内嵌函数之间
G:global 全局作用域
B:build-in 内置作用域


python装饰器闭包

closure：内部函数对enclosig作用域的变量进行引用

函数实质与属性
函数是一个对象
函数执行完之后内部变量回收
函数属性
函数返回值



#概念：如果在一个内部函数里，对在外部作用域（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包（closure）
分解来说，包含下面3个条件：
1) 需要函数嵌套, 就是一个函数里面再写一个函数.
2) 外部函数需要返回一个内部函数的引
3) 外部函数中有一些局部变量, 并且, 这些局部变量在内部函数中有使用
一些概念:
1)自由变量: 外部函数中定义的局部变量, 并且在内部函数中被使用
2) 闭包: 那个使用了自由变量并被返回的内部函数就称为闭包

#支持闭包的语言有这样的特性：
1)函数是一阶值（First-class value），即函数可以作为另一个函数的返回值或参数，还可以作为一个变量的值
2)函数可以嵌套定义，即在一个函数内部可以定义另一个函数

#代码示例（点开编辑查看）
#coding:utf-8
#闭包：实现封装，实现代码复用
def set_passline(passline):   #passline = 60
    def cmp(val):             #cmp() -> 闭包
        if val >= passline:
            print('pass')
        else:
            print("failed")
    return cmp
f_100 = set_passline(60)   #f_100是函数，也即返回的函数cmp
f_150 = set_passline(90)
f_100(89)
f_150(89)

封装和代码的复用




闭包会保留来自外围作用域变量的信息。
Python 中函数对象都拥有一个 __closure__ 属性。
__closure__ 对象返回一个由 cell 对象组成的元组，cell 对象记录了定义在外围作用域的变量信息。
对于那些不是闭包的函数对象来说，__closure__ 属性值为 None


函数调用顺序：（点击编辑查看）
#coding:utf-8
def my_sum(*arg):   #3、
    print('my_sum')
    return sum(arg)
def my_average(*arg):
    print('my_average')
    return sum(arg)/len(arg)
def dec(func):
    def in_dec(*arg):   #闭包 1、
        print('in_dec()=',arg)
        if len(arg) == 0:
            return 0
        for val in arg:
            if not isinstance(val, int):
                return 0
        return func(*arg)   #2、
    return in_dec           #2、
my_sum = dec(my_sum)
#1、dec函数返回in_dec -> my_sum
#2、my_sum = in_dec(*arg)
print(my_sum(1,2,3,4,5))
print(my_sum(1,2,3,4,5,'6'))

打印结果：
in_dec(*arg)= (1, 2, 3, 4, 5)
my_sum
15
in_dec(*arg)= (1, 2, 3, 4, 5, '6')
0

python装饰器
1 装饰器用来装饰函数
2 返回一个函数对象
3 被装饰函数标识符指定返回的函数对象
4 语法糖 @deco
